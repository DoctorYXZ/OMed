import os
import torch
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from transformers import ViTImageProcessor, ViTModel

os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"
os.environ["TF_ENABLE_ONEDNN_OPTS"] = "0"

# CUDA for PyTorch
use_cuda = torch.cuda.is_available()
device = torch.device("cuda" if use_cuda else "cpu")

# Load the pretrained Vision Transformer model
processor = ViTImageProcessor.from_pretrained(
    'C:\\code\\Prognosis_prediction\\vit_large_patch16_224')
model = ViTModel.from_pretrained(
    'C:\\code\\Prognosis_prediction\\vit_large_patch16_224')
model.eval()
if use_cuda and torch.cuda.device_count() > 1:
    print(f"Using {torch.cuda.device_count()} GPUs.")
    model = torch.nn.DataParallel(model)
model.to(device)

# Define the folder path for the WSI's 224x224 patches
folder_path = 'C:\\path\\to\\your color-normalized 224 patch files'

# Feature indices and their coefficients
feature_coefficients = {
    1018: 0.036556891,
    1019: 0.102336353,
    110: -0.001232963,
    111: -0.03629039,
    112: -0.079989223,
    113: -0.125966436,
    114: -0.169923241,
    115: -0.209131171,
    116: -0.237935332,
    117: -0.265062001,
    118: -0.300514345,
    119: -0.343353778,
    129: -0.066110561,
    130: -0.180034059,
    131: -0.28192846,
    132: -0.373166206,
    133: -0.467298574,
    134: -0.565127893,
    135: -0.659956895,
    136: -0.748759942,
    137: -0.837997244,
    138: -0.939014613,
    139: -1.049459735,
    156: -0.003842296,
    157: -0.057887142,
    158: -0.130643976,
    159: -0.202604644,
    172: -0.007720601,
    173: -0.048956499,
    174: -0.098308096,
    175: -0.151306441,
    176: -0.195783078,
    177: -0.238845994,
    178: -0.29248465,
    179: -0.350912344,
    189: -0.047331427,
    190: -0.15408037,
    191: -0.245969098,
    192: -0.324573202,
    193: -0.404370207,
    194: -0.492727504,
    195: -0.571437878,
    196: -0.650793961,
    197: -0.731801012,
    198: -0.821056928,
    199: -0.916452653,
    218: 0.004100291,
    219: 0.042085755,
    231: 0.023457649,
    232: 0.090399929,
    233: 0.153524673,
    234: 0.213335914,
    235: 0.273763112,
    236: 0.33194083,
    237: 0.399673619,
    238: 0.469590008,
    239: 0.548800932,
    290: 0.052934304,
    291: 0.145330582,
    292: 0.223898272,
    293: 0.287421702,
    294: 0.33615276,
    295: 0.379398609,
    296: 0.41553075,
    297: 0.455940377,
    298: 0.503056892,
    299: 0.556387991,
    309: -0.027376461,
    310: -0.058096823,
    311: -0.076706743,
    312: -0.095309698,
    313: -0.119349788,
    314: -0.144476922,
    315: -0.183089628,
    316: -0.22435943,
    317: -0.27975279,
    318: -0.348736113,
    319: -0.425955307,
    329: -0.005972427,
    330: -0.018350381,
    331: -0.01631374,
    332: -0.011574591,
    333: -0.009809397,
    334: -0.010673109,
    335: -0.017418203,
    336: -0.026668657,
    337: -0.051935093,
    338: -0.086248194,
    339: -0.126696178,
    34: 0.002598805,
    35: 0.052735872,
    36: 0.118330182,
    367: -0.011500164,
    368: -0.069896397,
    369: -0.117762411,
    37: 0.195885936,
    370: -0.138488444,
    371: -0.142729202,
    372: -0.143692198,
    373: -0.147142517,
    374: -0.15199842,
    375: -0.165415395,
    376: -0.181250942,
    377: -0.209642898,
    378: -0.25202905,
    379: -0.302185797,
    38: 0.287160407,
    389: -0.012062408,
    39: 0.390506351,
    390: -0.040305708,
    391: -0.051461749,
    392: -0.05501686,
    393: -0.061592146,
    394: -0.076852952,
    395: -0.091430205,
    396: -0.115030737,
    397: -0.15747307,
    398: -0.210351924,
    399: -0.265608011,
    417: -0.007748064,
    418: -0.079869106,
    419: -0.166354839,
    436: -0.027649827,
    437: -0.129198744,
    438: -0.239499205,
    439: -0.35346817,
    456: -0.013833679,
    457: -0.067196055,
    458: -0.124738522,
    459: -0.185622837,
    494: -0.039707654,
    495: -0.127097698,
    496: -0.234876352,
    497: -0.34843075,
    498: -0.464323142,
    499: -0.583730693,
    518: -0.020601613,
    519: -0.065191313,
    537: -0.014463661,
    538: -0.056041243,
    539: -0.09990314,
    57: -0.044033388,
    574: -0.003212032,
    575: -0.045711613,
    576: -0.10816102,
    577: -0.17120667,
    578: -0.239260374,
    579: -0.309128495,
    58: -0.118857699,
    59: -0.193940663,
    597: -0.008067432,
    598: -0.054751395,
    599: -0.105908692,
    655: 0.029529024,
    656: 0.1328812,
    657: 0.241014605,
    658: 0.359562137,
    659: 0.481229989,
    733: 0.020483966,
    734: 0.099315652,
    735: 0.163302338,
    736: 0.230533387,
    737: 0.295573361,
    738: 0.358623307,
    739: 0.426008177,
    79: 0.000402124,
    805: 0.021380712,
    806: 0.114749794,
    807: 0.220515971,
    808: 0.333857512,
    809: 0.461256102,
    810: 0.611470472,
    811: 0.789088686,
    812: 0.994416972,
    813: 1.210547422,
    814: 1.428719299,
    815: 1.665448704,
    816: 1.916058345,
    817: 2.186763768,
    818: 2.48399224,
    819: 2.803766353,
    824: 0.004523256,
    825: 0.073196234,
    826: 0.170333142,
    827: 0.271340915,
    828: 0.372830124,
    829: 0.4817689,
    830: 0.60448383,
    831: 0.747047161,
    832: 0.912409785,
    833: 1.088976116,
    834: 1.274321766,
    835: 1.477571957,
    836: 1.700239798,
    837: 1.947256968,
    838: 2.226550992,
    839: 2.524835865,
    859: -0.027249461,
    866: 0.036479827,
    867: 0.127290622,
    868: 0.227984754,
    869: 0.345033395,
    870: 0.485704184,
    871: 0.645221707,
    872: 0.826578725,
    873: 1.016160007,
    874: 1.216799313,
    875: 1.419826257,
    876: 1.641892406,
    877: 1.886695956,
    878: 2.156915351,
    879: 2.444966114,
    884: 0.02813561,
    885: 0.123718119,
    886: 0.234057078,
    887: 0.353950051,
    888: 0.477387045,
    889: 0.61226504,
    890: 0.762974864,
    891: 0.933326182,
    892: 1.124718844,
    893: 1.325790173,
    894: 1.532714482,
    895: 1.754416281,
    896: 1.990882531,
    897: 2.248127038,
    898: 2.537331149,
    899: 2.848311651,
    910: -0.043832462,
    911: -0.11721965,
    912: -0.178526594,
    913: -0.230413284,
    914: -0.27281543,
    915: -0.303067262,
    916: -0.332042224,
    917: -0.363844608,
    918: -0.405439897,
    919: -0.44404198,
    970: -0.037431163,
    971: -0.103250553,
    972: -0.147002625,
    973: -0.174873879,
    974: -0.178123676,
    975: -0.163936948,
    976: -0.135246153,
    977: -0.106318966,
    978: -0.086606486,
    979: -0.064775291
}

# Build the index list for positively correlated features
feature_indices = [
    *range(34, 40), *range(57, 60), 79, *range(110, 120),
    *range(129, 140), *range(156, 160), *range(172, 180),
    *range(189, 200), *range(218, 220), *range(231, 240),
    *range(290, 300), *range(309, 320), *range(329, 340),
    *range(367, 380), *range(389, 400), *range(417, 420),
    *range(436, 440), *range(456, 460), *range(494, 500),
    *range(518, 520), *range(537, 540), *range(574, 580),
    *range(597, 600), *range(655, 660), *range(733, 740),
    *range(805, 820), *range(824, 840), 859, *range(866, 880),
    *range(884, 920), *range(970, 980), *range(1018, 1020)
]

# Iterate through all files in the folder
for filename in os.listdir(folder_path):
    if filename.endswith('.tif'):
        image_path = os.path.join(folder_path, filename)
        with Image.open(image_path) as image:
            wsi_image = np.array(image)[:, :, :3]
            inputs = processor(images=Image.fromarray(wsi_image), return_tensors="pt").to(device)
            with torch.no_grad():
                outputs = model(**inputs)
                features = outputs.last_hidden_state[:, 0, :].cpu().numpy().flatten()

                # Extract only the positively correlated features and multiply by their respective coefficients
                selected_features = np.array(
                    [features[i] * feature_coefficients[i] if i in feature_coefficients else 0 for i in
                     feature_indices])

                # Adjust the feature length to the nearest perfect square
                perfect_square_size = int(np.sqrt(len(selected_features))) ** 2
                selected_features = selected_features[:perfect_square_size]

                # Reshape for square visualization
                square_size = int(np.sqrt(len(selected_features)))
                heatmap = np.reshape(selected_features, (square_size, square_size))

                # Generate and save the transparent heatmap overlaid on the original image
                fig, ax = plt.subplots(figsize=(291.6 / 96, 291.6 / 96), dpi=96)  # Set the figure size and dpi
                ax.imshow(wsi_image)
                ax.imshow(heatmap, cmap='viridis', alpha=0.5, interpolation='nearest')
                ax.axis('off')  # Turn off the axis
                plt.savefig(
                    f'C:\\path\\to\\visual heatmap for 224patches\\{filename}',
                    transparent=True, bbox_inches='tight', pad_inches=0)
                plt.close(fig)  # Close the figure to free memory
